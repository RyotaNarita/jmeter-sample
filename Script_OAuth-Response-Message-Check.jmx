<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="テスト計画" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="ユーザー定義変数" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group (OAuth Auto Test )" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1281132211000</longProp>
        <longProp name="ThreadGroup.end_time">1281132211000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration">1200</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="SERVER_FQDN" elementType="Argument">
              <stringProp name="Argument.name">SERVER_FQDN</stringProp>
              <stringProp name="Argument.value">xxx.apic-demo.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">APIサーバーのFQDN。Hostヘッダーに設定します。</stringProp>
            </elementProp>
            <elementProp name="SERVER_NODE1" elementType="Argument">
              <stringProp name="Argument.name">SERVER_NODE1</stringProp>
              <stringProp name="Argument.value">xxx.apic-demo.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">APIサーバーのIPアドレス。</stringProp>
            </elementProp>
            <elementProp name="SERVER_PORT" elementType="Argument">
              <stringProp name="Argument.name">SERVER_PORT</stringProp>
              <stringProp name="Argument.value">443</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">APIサーバーのポート</stringProp>
            </elementProp>
            <elementProp name="CATALOG_PATH" elementType="Argument">
              <stringProp name="Argument.name">CATALOG_PATH</stringProp>
              <stringProp name="Argument.value">/prv-org/sandbox</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">カタログのパス</stringProp>
            </elementProp>
            <elementProp name="TEST_API_PATH" elementType="Argument">
              <stringProp name="Argument.name">TEST_API_PATH</stringProp>
              <stringProp name="Argument.value">/v1/protect</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">OAuth保護されたテストAPIのパス</stringProp>
            </elementProp>
            <elementProp name="CLIENT_ID" elementType="Argument">
              <stringProp name="Argument.name">CLIENT_ID</stringProp>
              <stringProp name="Argument.value">***</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">アプリケーションのクライアントID</stringProp>
            </elementProp>
            <elementProp name="CLIENT_SECRET" elementType="Argument">
              <stringProp name="Argument.name">CLIENT_SECRET</stringProp>
              <stringProp name="Argument.value">***</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">アプリケーションのクライアントシークレット</stringProp>
            </elementProp>
            <elementProp name="REDIRECT_URI" elementType="Argument">
              <stringProp name="Argument.name">REDIRECT_URI</stringProp>
              <stringProp name="Argument.value">https://example.com/redirect</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">アプリケーションのリダイレクトURI</stringProp>
            </elementProp>
            <elementProp name="RESOURCE_OWNER_ID" elementType="Argument">
              <stringProp name="Argument.name">RESOURCE_OWNER_ID</stringProp>
              <stringProp name="Argument.value">user</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">基本認証で使用するリソース・オーナーのID</stringProp>
            </elementProp>
            <elementProp name="RESOURCE_OWNER_SECRET" elementType="Argument">
              <stringProp name="Argument.name">RESOURCE_OWNER_SECRET</stringProp>
              <stringProp name="Argument.value">passw0rd</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">基本認証で使用するリソース・オーナーのパスワード</stringProp>
            </elementProp>
            <elementProp name="OAUTH_RESPONSE_TYPE" elementType="Argument">
              <stringProp name="Argument.name">OAUTH_RESPONSE_TYPE</stringProp>
              <stringProp name="Argument.value">code</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">OAuthの権限付与タイプ（このシナリオはcodeを前提）</stringProp>
            </elementProp>
            <elementProp name="OAUTH_SCOPE" elementType="Argument">
              <stringProp name="Argument.name">OAUTH_SCOPE</stringProp>
              <stringProp name="Argument.value">scope1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">OAuthのスコープ</stringProp>
            </elementProp>
            <elementProp name="OAUTH_AUTHZ_PATH" elementType="Argument">
              <stringProp name="Argument.name">OAUTH_AUTHZ_PATH</stringProp>
              <stringProp name="Argument.value">/v1/oauth2/authorize</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">OAuthの許可パス</stringProp>
            </elementProp>
            <elementProp name="OAUTH_TOKEN_PATH" elementType="Argument">
              <stringProp name="Argument.name">OAUTH_TOKEN_PATH</stringProp>
              <stringProp name="Argument.value">/v1/oauth2/token</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">OAuthのトークンパス</stringProp>
            </elementProp>
            <elementProp name="OAUTH_REVOKE_PATH" elementType="Argument">
              <stringProp name="Argument.name">OAUTH_REVOKE_PATH</stringProp>
              <stringProp name="Argument.value">/v1/oauth2/revoke</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">OAuthのクライアント失効パス</stringProp>
            </elementProp>
            <elementProp name="OAUTH_AT_TIME" elementType="Argument">
              <stringProp name="Argument.name">OAUTH_AT_TIME</stringProp>
              <stringProp name="Argument.value">5000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">アクセストークンの有効期間（ミリ秒）</stringProp>
            </elementProp>
            <elementProp name="OAUTH_RT_TIME" elementType="Argument">
              <stringProp name="Argument.name">OAUTH_RT_TIME</stringProp>
              <stringProp name="Argument.value">5000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">リフレッシュトークンの有効期間（ミリ秒）</stringProp>
            </elementProp>
            <elementProp name="OAUTH_AC_TIME" elementType="Argument">
              <stringProp name="Argument.name">OAUTH_AC_TIME</stringProp>
              <stringProp name="Argument.value">5000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">認可コードの有効期間（ミリ秒）</stringProp>
            </elementProp>
            <elementProp name="OAUTH_CONSENT_TIME" elementType="Argument">
              <stringProp name="Argument.name">OAUTH_CONSENT_TIME</stringProp>
              <stringProp name="Argument.value">10000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">同意の最大の有効期間（ミリ秒）</stringProp>
            </elementProp>
            <elementProp name="OAUTH_APIM_DEBUG" elementType="Argument">
              <stringProp name="Argument.name">OAUTH_APIM_DEBUG</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">デバッグ・モードの有効化有無</stringProp>
            </elementProp>
            <elementProp name="OUTPUT_AUTHZ" elementType="Argument">
              <stringProp name="Argument.name">OUTPUT_AUTHZ</stringProp>
              <stringProp name="Argument.value">AuthZ_output.xml</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">許可パスに関する応答結果の出力ファイル名</stringProp>
            </elementProp>
            <elementProp name="OUTPUT_TOKEN" elementType="Argument">
              <stringProp name="Argument.name">OUTPUT_TOKEN</stringProp>
              <stringProp name="Argument.value">Token_output.xml</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">トークンパスに関する応答結果の出力ファイル名</stringProp>
            </elementProp>
            <elementProp name="OUTPUT_TOKEN_INVALID" elementType="Argument">
              <stringProp name="Argument.name">OUTPUT_TOKEN_INVALID</stringProp>
              <stringProp name="Argument.value">Token-invalid_output.xml</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">トークンパス（不正）に関する応答結果の出力ファイル名</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TestStep" enabled="true">
          <stringProp name="TestPlan.comments">認可コードタイプ・コンフィデンシャルクライアント</stringProp>
        </GenericController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TestCase0" enabled="true">
            <stringProp name="TestPlan.comments">正常ケース</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.1 request for AuthZ Code" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${OAUTH_RESPONSE_TYPE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${OAUTH_SCOPE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">APIm-Debug</stringProp>
                    <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                <collectionProp name="AuthManager.auth_list">
                  <elementProp name="" elementType="Authorization">
                    <stringProp name="Authorization.url"></stringProp>
                    <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                    <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                    <stringProp name="Authorization.domain"></stringProp>
                    <stringProp name="Authorization.realm"></stringProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              </AuthManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(authorization_code)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">authorization_code</stringProp>
                <stringProp name="RegexExtractor.regex">Location: (.*)code=(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">incorrect-authorization-value</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.2 request for Token" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">grant_type=authorization_code&amp;redirect_uri=${REDIRECT_URI}&amp;code=${authorization_code}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_TOKEN_PATH}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(トークンエンドポイント)" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">APIm-Debug</stringProp>
                    <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                <collectionProp name="AuthManager.auth_list">
                  <elementProp name="" elementType="Authorization">
                    <stringProp name="Authorization.url"></stringProp>
                    <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                    <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                    <stringProp name="Authorization.domain"></stringProp>
                    <stringProp name="Authorization.realm"></stringProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              </AuthManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(access_token)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">access_token</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">incorrect-access_token-value</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(refresh_token)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">refresh_token</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;refresh_token&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">incorrect-refresh_token-value</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.3 request for API Call using Access Token" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CATALOG_PATH}${TEST_API_PATH}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(API Call)" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="-H &apos;accept" elementType="Header">
                    <stringProp name="Header.name">accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="x-ibm-client-id" elementType="Header">
                    <stringProp name="Header.name">x-ibm-client-id</stringProp>
                    <stringProp name="Header.value">${CLIENT_ID}</stringProp>
                  </elementProp>
                  <elementProp name="authorization" elementType="Header">
                    <stringProp name="Header.name">authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">APIm-Debug</stringProp>
                    <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.4 request for refresh Access Token" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">grant_type=refresh_token&amp;redirect_uri=${REDIRECT_URI}&amp;refresh_token=${refresh_token}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_TOKEN_PATH}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">APIm-Debug</stringProp>
                    <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                <collectionProp name="AuthManager.auth_list">
                  <elementProp name="" elementType="Authorization">
                    <stringProp name="Authorization.url"></stringProp>
                    <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                    <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                    <stringProp name="Authorization.domain"></stringProp>
                    <stringProp name="Authorization.realm"></stringProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              </AuthManager>
              <hashTree/>
              <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="アクションハンドラの終了状態" enabled="true">
                <intProp name="OnError.action">6</intProp>
              </ResultAction>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(access_token)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">access_token</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">${access_token}</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(refresh_token)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">refresh_token</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;refresh_token&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">${refresh_token}</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="定数タイマ" enabled="true">
                <stringProp name="ConstantTimer.delay">1000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.5 request for revoke Access Token" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">token=${access_token}&amp;token_type_hint=access_token</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_REVOKE_PATH}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">APIm-Debug</stringProp>
                    <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                <collectionProp name="AuthManager.auth_list">
                  <elementProp name="" elementType="Authorization">
                    <stringProp name="Authorization.url"></stringProp>
                    <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                    <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                    <stringProp name="Authorization.domain"></stringProp>
                    <stringProp name="Authorization.realm"></stringProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              </AuthManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.6 request for revoke Refresh Token" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">token=${refresh_token}&amp;token_type_hint=refresh_token</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_REVOKE_PATH}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">APIm-Debug</stringProp>
                    <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                <collectionProp name="AuthManager.auth_list">
                  <elementProp name="" elementType="Authorization">
                    <stringProp name="Authorization.url"></stringProp>
                    <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                    <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                    <stringProp name="Authorization.domain"></stringProp>
                    <stringProp name="Authorization.realm"></stringProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              </AuthManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TestCase1" enabled="true">
            <stringProp name="TestPlan.comments">認可コード発行エラーケース</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.1 Valid" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${OAUTH_RESPONSE_TYPE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${OAUTH_SCOPE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">APIm-Debug</stringProp>
                    <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                <collectionProp name="AuthManager.auth_list">
                  <elementProp name="" elementType="Authorization">
                    <stringProp name="Authorization.url"></stringProp>
                    <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                    <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                    <stringProp name="Authorization.domain"></stringProp>
                    <stringProp name="Authorization.realm"></stringProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              </AuthManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(authorization_code)" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                <stringProp name="RegexExtractor.refname">authorization_code</stringProp>
                <stringProp name="RegexExtractor.regex">Location: (.*)code=(.*)</stringProp>
                <stringProp name="RegexExtractor.template">$2$</stringProp>
                <stringProp name="RegexExtractor.default">incorrect-authorization-value</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="AuthZ Output" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>false</time>
                    <latency>false</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>false</assertions>
                    <subresults>false</subresults>
                    <responseData>true</responseData>
                    <samplerData>false</samplerData>
                    <xml>true</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>true</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                  </value>
                </objProp>
                <stringProp name="filename">${OUTPUT_AUTHZ}</stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.2 invalid rediret_uri" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${OAUTH_RESPONSE_TYPE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${OAUTH_SCOPE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">invalid_uri</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">APIm-Debug</stringProp>
                    <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                <collectionProp name="AuthManager.auth_list">
                  <elementProp name="" elementType="Authorization">
                    <stringProp name="Authorization.url"></stringProp>
                    <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                    <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                    <stringProp name="Authorization.domain"></stringProp>
                    <stringProp name="Authorization.realm"></stringProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              </AuthManager>
              <hashTree/>
              <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="AuthZ Output" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>false</time>
                    <latency>false</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>false</assertions>
                    <subresults>false</subresults>
                    <responseData>true</responseData>
                    <samplerData>false</samplerData>
                    <xml>true</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>true</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                  </value>
                </objProp>
                <stringProp name="filename">${OUTPUT_AUTHZ}</stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.3 invalid scope(not match)" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${OAUTH_RESPONSE_TYPE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">invalid_scope</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">APIm-Debug</stringProp>
                    <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                <collectionProp name="AuthManager.auth_list">
                  <elementProp name="" elementType="Authorization">
                    <stringProp name="Authorization.url"></stringProp>
                    <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                    <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                    <stringProp name="Authorization.domain"></stringProp>
                    <stringProp name="Authorization.realm"></stringProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              </AuthManager>
              <hashTree/>
              <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="AuthZ Output" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>false</time>
                    <latency>false</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>false</assertions>
                    <subresults>false</subresults>
                    <responseData>true</responseData>
                    <samplerData>false</samplerData>
                    <xml>true</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>true</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                  </value>
                </objProp>
                <stringProp name="filename">${OUTPUT_AUTHZ}</stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.4 invalid scope(null or not exist)" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${OAUTH_RESPONSE_TYPE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">APIm-Debug</stringProp>
                    <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                <collectionProp name="AuthManager.auth_list">
                  <elementProp name="" elementType="Authorization">
                    <stringProp name="Authorization.url"></stringProp>
                    <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                    <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                    <stringProp name="Authorization.domain"></stringProp>
                    <stringProp name="Authorization.realm"></stringProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              </AuthManager>
              <hashTree/>
              <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="AuthZ Output" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>false</time>
                    <latency>false</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>false</assertions>
                    <subresults>false</subresults>
                    <responseData>true</responseData>
                    <samplerData>false</samplerData>
                    <xml>true</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>true</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                  </value>
                </objProp>
                <stringProp name="filename">${OUTPUT_AUTHZ}</stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.5 invalid response_type" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">invalid_response_type</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${OAUTH_SCOPE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">APIm-Debug</stringProp>
                    <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                <collectionProp name="AuthManager.auth_list">
                  <elementProp name="" elementType="Authorization">
                    <stringProp name="Authorization.url"></stringProp>
                    <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                    <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                    <stringProp name="Authorization.domain"></stringProp>
                    <stringProp name="Authorization.realm"></stringProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              </AuthManager>
              <hashTree/>
              <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="AuthZ Output" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>false</time>
                    <latency>false</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>false</assertions>
                    <subresults>false</subresults>
                    <responseData>true</responseData>
                    <samplerData>false</samplerData>
                    <xml>true</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>true</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                  </value>
                </objProp>
                <stringProp name="filename">${OUTPUT_AUTHZ}</stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.6 invalid client_id" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RESPONSE_TYPE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${OAUTH_SCOPE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">invalid_client_id</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">APIm-Debug</stringProp>
                    <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                <collectionProp name="AuthManager.auth_list">
                  <elementProp name="" elementType="Authorization">
                    <stringProp name="Authorization.url"></stringProp>
                    <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                    <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                    <stringProp name="Authorization.domain"></stringProp>
                    <stringProp name="Authorization.realm"></stringProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              </AuthManager>
              <hashTree/>
              <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="AuthZ Output" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>false</time>
                    <latency>false</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>false</assertions>
                    <subresults>false</subresults>
                    <responseData>true</responseData>
                    <samplerData>false</samplerData>
                    <xml>true</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>true</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                  </value>
                </objProp>
                <stringProp name="filename">${OUTPUT_AUTHZ}</stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.7 invalid URL" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RESPONSE_TYPE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${OAUTH_SCOPE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CATALOG_PATH}/invalid-path</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">APIm-Debug</stringProp>
                    <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                <collectionProp name="AuthManager.auth_list">
                  <elementProp name="" elementType="Authorization">
                    <stringProp name="Authorization.url"></stringProp>
                    <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                    <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                    <stringProp name="Authorization.domain"></stringProp>
                    <stringProp name="Authorization.realm"></stringProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              </AuthManager>
              <hashTree/>
              <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="AuthZ Output" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>false</time>
                    <latency>false</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>false</assertions>
                    <subresults>false</subresults>
                    <responseData>true</responseData>
                    <samplerData>false</samplerData>
                    <xml>true</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>true</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                  </value>
                </objProp>
                <stringProp name="filename">${OUTPUT_AUTHZ}</stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.8 invalid method" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="response_type" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${OAUTH_RESPONSE_TYPE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">response_type</stringProp>
                  </elementProp>
                  <elementProp name="scope" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${OAUTH_SCOPE}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">scope</stringProp>
                  </elementProp>
                  <elementProp name="redirect_uri" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">redirect_uri</stringProp>
                  </elementProp>
                  <elementProp name="client_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">client_id</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
              <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Host</stringProp>
                    <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">APIm-Debug</stringProp>
                    <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                <collectionProp name="AuthManager.auth_list">
                  <elementProp name="" elementType="Authorization">
                    <stringProp name="Authorization.url"></stringProp>
                    <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                    <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                    <stringProp name="Authorization.domain"></stringProp>
                    <stringProp name="Authorization.realm"></stringProp>
                  </elementProp>
                </collectionProp>
                <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
              </AuthManager>
              <hashTree/>
              <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="AuthZ Output" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>false</time>
                    <latency>false</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>false</assertions>
                    <subresults>false</subresults>
                    <responseData>true</responseData>
                    <samplerData>false</samplerData>
                    <xml>true</xml>
                    <fieldNames>false</fieldNames>
                    <responseHeaders>true</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                  </value>
                </objProp>
                <stringProp name="filename">${OUTPUT_AUTHZ}</stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TestCase2" enabled="true">
            <stringProp name="TestPlan.comments">トークン発行エラーケース</stringProp>
          </GenericController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2.1 正常終了" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.1 request for AuthZ Code" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="response_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_RESPONSE_TYPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">response_type</stringProp>
                    </elementProp>
                    <elementProp name="scope" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_SCOPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">scope</stringProp>
                    </elementProp>
                    <elementProp name="redirect_uri" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">redirect_uri</stringProp>
                    </elementProp>
                    <elementProp name="client_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">client_id</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                      <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(authorization_code)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">authorization_code</stringProp>
                  <stringProp name="RegexExtractor.regex">Location: (.*)code=(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-authorization-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.1 valid" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=authorization_code&amp;redirect_uri=${REDIRECT_URI}&amp;code=${authorization_code}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_TOKEN_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(トークンエンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                      <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Token Output" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>false</time>
                      <latency>false</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>false</assertions>
                      <subresults>false</subresults>
                      <responseData>true</responseData>
                      <samplerData>false</samplerData>
                      <xml>true</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>true</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                    </value>
                  </objProp>
                  <stringProp name="filename">${OUTPUT_TOKEN}</stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2.2 code不正" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.1 request for AuthZ Code" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="response_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_RESPONSE_TYPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">response_type</stringProp>
                    </elementProp>
                    <elementProp name="scope" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_SCOPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">scope</stringProp>
                    </elementProp>
                    <elementProp name="redirect_uri" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">redirect_uri</stringProp>
                    </elementProp>
                    <elementProp name="client_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">client_id</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                      <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(authorization_code)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">authorization_code</stringProp>
                  <stringProp name="RegexExtractor.regex">Location: (.*)code=(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-authorization-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.2 invalid code" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=authorization_code&amp;redirect_uri=${REDIRECT_URI}&amp;code=invalid_code</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_TOKEN_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(トークンエンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                      <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Token Output" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>false</time>
                      <latency>false</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>false</assertions>
                      <subresults>false</subresults>
                      <responseData>true</responseData>
                      <samplerData>false</samplerData>
                      <xml>true</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>true</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                    </value>
                  </objProp>
                  <stringProp name="filename">${OUTPUT_TOKEN}</stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2.3 redirect_uri 不正" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.1 request for AuthZ Code" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="response_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_RESPONSE_TYPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">response_type</stringProp>
                    </elementProp>
                    <elementProp name="scope" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_SCOPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">scope</stringProp>
                    </elementProp>
                    <elementProp name="redirect_uri" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">redirect_uri</stringProp>
                    </elementProp>
                    <elementProp name="client_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">client_id</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                      <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(authorization_code)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">authorization_code</stringProp>
                  <stringProp name="RegexExtractor.regex">Location: (.*)code=(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-authorization-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.3 invalid redirect_uri" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=authorization_code&amp;redirect_uri=invalid_uri&amp;code=${authorization_code}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_TOKEN_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(トークンエンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                      <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Token Output" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>false</time>
                      <latency>false</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>false</assertions>
                      <subresults>false</subresults>
                      <responseData>true</responseData>
                      <samplerData>false</samplerData>
                      <xml>true</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>true</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                    </value>
                  </objProp>
                  <stringProp name="filename">${OUTPUT_TOKEN}</stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2.4 codeがパラメータに含まれない" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.1 request for AuthZ Code" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="response_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_RESPONSE_TYPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">response_type</stringProp>
                    </elementProp>
                    <elementProp name="scope" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_SCOPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">scope</stringProp>
                    </elementProp>
                    <elementProp name="redirect_uri" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">redirect_uri</stringProp>
                    </elementProp>
                    <elementProp name="client_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">client_id</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                      <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(authorization_code)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">authorization_code</stringProp>
                  <stringProp name="RegexExtractor.regex">Location: (.*)code=(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-authorization-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.4 not exist code parameter" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=authorization_code&amp;redirect_uri=${REDIRECT_URI}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_TOKEN_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(トークンエンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                      <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Token Output" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>false</time>
                      <latency>false</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>false</assertions>
                      <subresults>false</subresults>
                      <responseData>true</responseData>
                      <samplerData>false</samplerData>
                      <xml>true</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>true</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                    </value>
                  </objProp>
                  <stringProp name="filename">${OUTPUT_TOKEN}</stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2.5 Content-Type不正" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.1 request for AuthZ Code" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="response_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_RESPONSE_TYPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">response_type</stringProp>
                    </elementProp>
                    <elementProp name="scope" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_SCOPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">scope</stringProp>
                    </elementProp>
                    <elementProp name="redirect_uri" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">redirect_uri</stringProp>
                    </elementProp>
                    <elementProp name="client_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">client_id</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                      <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(authorization_code)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">authorization_code</stringProp>
                  <stringProp name="RegexExtractor.regex">Location: (.*)code=(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-authorization-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.5 invalid Content-Type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=authorization_code&amp;redirect_uri=${REDIRECT_URI}&amp;code=${authorization_code}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_TOKEN_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(トークンエンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">invalid_content-type</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                      <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Token Output" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>false</time>
                      <latency>false</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>false</assertions>
                      <subresults>false</subresults>
                      <responseData>true</responseData>
                      <samplerData>false</samplerData>
                      <xml>true</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>true</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                    </value>
                  </objProp>
                  <stringProp name="filename">${OUTPUT_TOKEN}</stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2.6 grant_type 不正" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.1 request for AuthZ Code" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="response_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_RESPONSE_TYPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">response_type</stringProp>
                    </elementProp>
                    <elementProp name="scope" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_SCOPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">scope</stringProp>
                    </elementProp>
                    <elementProp name="redirect_uri" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">redirect_uri</stringProp>
                    </elementProp>
                    <elementProp name="client_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">client_id</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                      <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(authorization_code)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">authorization_code</stringProp>
                  <stringProp name="RegexExtractor.regex">Location: (.*)code=(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-authorization-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.6 invalid grant_type" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=invalid_grant_type&amp;redirect_uri=${REDIRECT_URI}&amp;code=${authorization_code}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_TOKEN_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(トークンエンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                      <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Token Output" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>false</time>
                      <latency>false</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>false</assertions>
                      <subresults>false</subresults>
                      <responseData>true</responseData>
                      <samplerData>false</samplerData>
                      <xml>true</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>true</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                    </value>
                  </objProp>
                  <stringProp name="filename">${OUTPUT_TOKEN}</stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2.7 Authorization 不正" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.1 request for AuthZ Code" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="response_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_RESPONSE_TYPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">response_type</stringProp>
                    </elementProp>
                    <elementProp name="scope" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_SCOPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">scope</stringProp>
                    </elementProp>
                    <elementProp name="redirect_uri" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">redirect_uri</stringProp>
                    </elementProp>
                    <elementProp name="client_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">client_id</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                      <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(authorization_code)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">authorization_code</stringProp>
                  <stringProp name="RegexExtractor.regex">Location: (.*)code=(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-authorization-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.7 invalid Authorization" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=authorization_code&amp;redirect_uri=${REDIRECT_URI}&amp;code=${authorization_code}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_TOKEN_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(トークンエンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">invalid_user_id</stringProp>
                      <stringProp name="Authorization.password">invalid</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Token Output" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>false</time>
                      <latency>false</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>false</assertions>
                      <subresults>false</subresults>
                      <responseData>true</responseData>
                      <samplerData>false</samplerData>
                      <xml>true</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>true</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                    </value>
                  </objProp>
                  <stringProp name="filename">${OUTPUT_TOKEN}</stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="2.8 URL不正" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.1 request for AuthZ Code" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="response_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_RESPONSE_TYPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">response_type</stringProp>
                    </elementProp>
                    <elementProp name="scope" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_SCOPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">scope</stringProp>
                    </elementProp>
                    <elementProp name="redirect_uri" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">redirect_uri</stringProp>
                    </elementProp>
                    <elementProp name="client_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">client_id</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                      <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(authorization_code)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">authorization_code</stringProp>
                  <stringProp name="RegexExtractor.regex">Location: (.*)code=(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-authorization-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.8 invalid URL" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=authorization_code&amp;redirect_uri=${REDIRECT_URI}&amp;code=${authorization_code}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}/invalid-path</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(トークンエンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                      <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Token Output" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>false</time>
                      <latency>false</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>false</assertions>
                      <subresults>false</subresults>
                      <responseData>true</responseData>
                      <samplerData>false</samplerData>
                      <xml>true</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>true</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                    </value>
                  </objProp>
                  <stringProp name="filename">${OUTPUT_TOKEN}</stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="TestCase3" enabled="true">
            <stringProp name="TestPlan.comments">その他のトークンエラー</stringProp>
          </GenericController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3.1 有効期限切れトークン時のAPI Call" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.1 request for AuthZ Code" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="response_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_RESPONSE_TYPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">response_type</stringProp>
                    </elementProp>
                    <elementProp name="scope" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_SCOPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">scope</stringProp>
                    </elementProp>
                    <elementProp name="redirect_uri" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">redirect_uri</stringProp>
                    </elementProp>
                    <elementProp name="client_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">client_id</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                      <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(authorization_code)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">authorization_code</stringProp>
                  <stringProp name="RegexExtractor.regex">Location: (.*)code=(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-authorization-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.2 request for Token" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=authorization_code&amp;redirect_uri=${REDIRECT_URI}&amp;code=${authorization_code}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_TOKEN_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(トークンエンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                      <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(access_token)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">access_token</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-access_token-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(refresh_token)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">refresh_token</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;refresh_token&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-refresh_token-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3.1 expired Access Token API Call" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${TEST_API_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(API Call)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="-H &apos;accept" elementType="Header">
                      <stringProp name="Header.name">accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="x-ibm-client-id" elementType="Header">
                      <stringProp name="Header.name">x-ibm-client-id</stringProp>
                      <stringProp name="Header.value">${CLIENT_ID}</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="定数タイマ（アクセストークンの失効待ち）" enabled="true">
                  <stringProp name="ConstantTimer.delay">${OAUTH_AT_TIME}</stringProp>
                </ConstantTimer>
                <hashTree/>
                <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Token invalid Output" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>false</time>
                      <latency>false</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>false</assertions>
                      <subresults>false</subresults>
                      <responseData>true</responseData>
                      <samplerData>false</samplerData>
                      <xml>true</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>true</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                    </value>
                  </objProp>
                  <stringProp name="filename">${OUTPUT_TOKEN_INVALID}</stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3.2 リフレッシュトークン有効期限切れ時のトークン発行" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.1 request for AuthZ Code" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="response_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_RESPONSE_TYPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">response_type</stringProp>
                    </elementProp>
                    <elementProp name="scope" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_SCOPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">scope</stringProp>
                    </elementProp>
                    <elementProp name="redirect_uri" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">redirect_uri</stringProp>
                    </elementProp>
                    <elementProp name="client_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">client_id</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                      <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(authorization_code)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">authorization_code</stringProp>
                  <stringProp name="RegexExtractor.regex">Location: (.*)code=(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-authorization-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.2 request for Token" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=authorization_code&amp;redirect_uri=${REDIRECT_URI}&amp;code=${authorization_code}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_TOKEN_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(トークンエンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                      <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(access_token)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">access_token</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-access_token-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(refresh_token)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">refresh_token</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;refresh_token&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-refresh_token-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3.2 expired Refresh Token" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=refresh_token&amp;redirect_uri=${REDIRECT_URI}&amp;refresh_token=${refresh_token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_TOKEN_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(トークンエンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                      <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(access_token)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">access_token</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-access_token-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(refresh_token)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">refresh_token</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;refresh_token&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-refresh_token-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="定数タイマ（リフレッシュトークンの失効待ち）" enabled="true">
                  <stringProp name="ConstantTimer.delay">${OAUTH_RT_TIME}</stringProp>
                </ConstantTimer>
                <hashTree/>
                <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Token invalid Output" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>false</time>
                      <latency>false</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>false</assertions>
                      <subresults>false</subresults>
                      <responseData>true</responseData>
                      <samplerData>false</samplerData>
                      <xml>true</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>true</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                    </value>
                  </objProp>
                  <stringProp name="filename">${OUTPUT_TOKEN_INVALID}</stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3.3 Consent Time 期限切れ時のAPI Call" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.1 request for AuthZ Code" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="response_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_RESPONSE_TYPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">response_type</stringProp>
                    </elementProp>
                    <elementProp name="scope" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_SCOPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">scope</stringProp>
                    </elementProp>
                    <elementProp name="redirect_uri" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">redirect_uri</stringProp>
                    </elementProp>
                    <elementProp name="client_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">client_id</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                      <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(authorization_code)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">authorization_code</stringProp>
                  <stringProp name="RegexExtractor.regex">Location: (.*)code=(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-authorization-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.2 request for Token" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=authorization_code&amp;redirect_uri=${REDIRECT_URI}&amp;code=${authorization_code}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_TOKEN_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(トークンエンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                      <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(access_token)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">access_token</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-access_token-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(refresh_token)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">refresh_token</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;refresh_token&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-refresh_token-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="ループコントローラ（同意時間の失効待ち）" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <intProp name="LoopController.loops">-1</intProp>
              </LoopController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.4 request for refresh Access Token" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">grant_type=refresh_token&amp;redirect_uri=${REDIRECT_URI}&amp;refresh_token=${refresh_token}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                  <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_TOKEN_PATH}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Host</stringProp>
                        <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">APIm-Debug</stringProp>
                        <stringProp name="Header.value">application/${OAUTH_APIM_DEBUG}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                    <collectionProp name="AuthManager.auth_list">
                      <elementProp name="" elementType="Authorization">
                        <stringProp name="Authorization.url"></stringProp>
                        <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                        <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                        <stringProp name="Authorization.domain"></stringProp>
                        <stringProp name="Authorization.realm"></stringProp>
                      </elementProp>
                    </collectionProp>
                    <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                  </AuthManager>
                  <hashTree/>
                  <ResultAction guiclass="ResultActionGui" testclass="ResultAction" testname="アクションハンドラの終了状態" enabled="true">
                    <intProp name="OnError.action">6</intProp>
                  </ResultAction>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(access_token)" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">access_token</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">${access_token}</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(refresh_token)" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">refresh_token</stringProp>
                    <stringProp name="RegexExtractor.regex">&quot;refresh_token&quot;:&quot;(.+?)&quot;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">${refresh_token}</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="定数タイマ" enabled="true">
                    <stringProp name="ConstantTimer.delay">1000</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3.3 expired Consent Time API Call" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${TEST_API_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(API Call)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="-H &apos;accept" elementType="Header">
                      <stringProp name="Header.name">accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="x-ibm-client-id" elementType="Header">
                      <stringProp name="Header.name">x-ibm-client-id</stringProp>
                      <stringProp name="Header.value">${CLIENT_ID}</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Token invalid Output" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>false</time>
                      <latency>false</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>false</assertions>
                      <subresults>false</subresults>
                      <responseData>true</responseData>
                      <samplerData>false</samplerData>
                      <xml>true</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>true</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                    </value>
                  </objProp>
                  <stringProp name="filename">${OUTPUT_TOKEN_INVALID}</stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3.4 Consent Time 期限切れ時のトークン発行" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3.4 expired Content Time Refresh Token" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=refresh_token&amp;redirect_uri=${REDIRECT_URI}&amp;refresh_token=${refresh_token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_TOKEN_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(トークンエンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                      <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(access_token)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">access_token</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-access_token-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(refresh_token)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">refresh_token</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;refresh_token&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-refresh_token-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Token invalid Output" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>false</time>
                      <latency>false</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>false</assertions>
                      <subresults>false</subresults>
                      <responseData>true</responseData>
                      <samplerData>false</samplerData>
                      <xml>true</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>true</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                    </value>
                  </objProp>
                  <stringProp name="filename">${OUTPUT_TOKEN_INVALID}</stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3.5 失効済みトーク使用時のAPI Call" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.1 request for AuthZ Code" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="response_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_RESPONSE_TYPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">response_type</stringProp>
                    </elementProp>
                    <elementProp name="scope" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_SCOPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">scope</stringProp>
                    </elementProp>
                    <elementProp name="redirect_uri" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">redirect_uri</stringProp>
                    </elementProp>
                    <elementProp name="client_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">client_id</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                      <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(authorization_code)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">authorization_code</stringProp>
                  <stringProp name="RegexExtractor.regex">Location: (.*)code=(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-authorization-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.2 request for Token" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=authorization_code&amp;redirect_uri=${REDIRECT_URI}&amp;code=${authorization_code}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_TOKEN_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(トークンエンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                      <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(access_token)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">access_token</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-access_token-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(refresh_token)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">refresh_token</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;refresh_token&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-refresh_token-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.5 request for revoke Access Token" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">token=${access_token}&amp;token_type_hint=access_token</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_REVOKE_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                      <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3.5 revoked Access Token API Call" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${TEST_API_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(API Call)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="-H &apos;accept" elementType="Header">
                      <stringProp name="Header.name">accept</stringProp>
                      <stringProp name="Header.value">application/json</stringProp>
                    </elementProp>
                    <elementProp name="x-ibm-client-id" elementType="Header">
                      <stringProp name="Header.name">x-ibm-client-id</stringProp>
                      <stringProp name="Header.value">${CLIENT_ID}</stringProp>
                    </elementProp>
                    <elementProp name="authorization" elementType="Header">
                      <stringProp name="Header.name">authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${access_token}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Token invalid Output" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>false</time>
                      <latency>false</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>false</assertions>
                      <subresults>false</subresults>
                      <responseData>true</responseData>
                      <samplerData>false</samplerData>
                      <xml>true</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>true</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                    </value>
                  </objProp>
                  <stringProp name="filename">${OUTPUT_TOKEN_INVALID}</stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3.6 失効済みリフレッシュトークン使用時のトークン発行" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.1 request for AuthZ Code" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="response_type" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_RESPONSE_TYPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">response_type</stringProp>
                    </elementProp>
                    <elementProp name="scope" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${OAUTH_SCOPE}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">scope</stringProp>
                    </elementProp>
                    <elementProp name="redirect_uri" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${REDIRECT_URI}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">redirect_uri</stringProp>
                    </elementProp>
                    <elementProp name="client_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${CLIENT_ID}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">client_id</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_AUTHZ_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ(認可エンドポイント)" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${RESOURCE_OWNER_ID}</stringProp>
                      <stringProp name="Authorization.password">${RESOURCE_OWNER_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(authorization_code)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                  <stringProp name="RegexExtractor.refname">authorization_code</stringProp>
                  <stringProp name="RegexExtractor.regex">Location: (.*)code=(.*)</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-authorization-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.2 request for Token" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=authorization_code&amp;redirect_uri=${REDIRECT_URI}&amp;code=${authorization_code}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_TOKEN_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                      <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(access_token)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">access_token</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-access_token-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(refresh_token)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">refresh_token</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;refresh_token&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-refresh_token-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="0.6 request for revoke Refresh Token" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">token=${refresh_token}&amp;token_type_hint=refresh_token</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_REVOKE_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                      <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="3.6 revoked Refresh Token" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">grant_type=refresh_token&amp;redirect_uri=${REDIRECT_URI}&amp;refresh_token=${refresh_token}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${SERVER_NODE1}</stringProp>
                <stringProp name="HTTPSampler.port">${SERVER_PORT}</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">${CATALOG_PATH}${OAUTH_TOKEN_PATH}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP ヘッダマネージャ" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Host</stringProp>
                      <stringProp name="Header.value">${SERVER_FQDN}</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded;charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">APIm-Debug</stringProp>
                      <stringProp name="Header.value">${OAUTH_APIM_DEBUG}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP 認証マネージャ" enabled="true">
                  <collectionProp name="AuthManager.auth_list">
                    <elementProp name="" elementType="Authorization">
                      <stringProp name="Authorization.url"></stringProp>
                      <stringProp name="Authorization.username">${CLIENT_ID}</stringProp>
                      <stringProp name="Authorization.password">${CLIENT_SECRET}</stringProp>
                      <stringProp name="Authorization.domain"></stringProp>
                      <stringProp name="Authorization.realm"></stringProp>
                    </elementProp>
                  </collectionProp>
                  <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
                </AuthManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(access_token)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">access_token</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;access_token&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-access_token-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="正規表現抽出(refresh_token)" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">refresh_token</stringProp>
                  <stringProp name="RegexExtractor.regex">&quot;refresh_token&quot;:&quot;(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">incorrect-refresh_token-value</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Token invalid Output" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>false</time>
                      <latency>false</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>false</assertions>
                      <subresults>false</subresults>
                      <responseData>true</responseData>
                      <samplerData>false</samplerData>
                      <xml>true</xml>
                      <fieldNames>false</fieldNames>
                      <responseHeaders>true</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                    </value>
                  </objProp>
                  <stringProp name="filename">${OUTPUT_TOKEN_INVALID}</stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="結果をツリーで表示" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
